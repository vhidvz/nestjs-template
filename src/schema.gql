# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Action {
  Any
  Create
  CreateGroup
  CreateOwn
  CreateShared
  Delete
  DeleteGroup
  DeleteOwn
  DeleteShared
  Destroy
  DestroyGroup
  DestroyOwn
  DestroyShared
  Read
  ReadGroup
  ReadOwn
  ReadShared
  Restore
  RestoreGroup
  RestoreOwn
  RestoreShared
  Update
  UpdateGroup
  UpdateOwn
  UpdateShared
}

interface BaseEntity {
  _id: ID
  createdAt: DateTime
  createdBy: String!
  deletedAt: DateTime
  deletedBy: String
  groups: [String!]
  partners: [String!]
  restoredAt: DateTime
  restoredBy: String
  tags: [String!]
  updatedAt: DateTime
  updatedBy: String
}

input CreateGrantDto {
  action: Action!
  createdBy: String!
  field: [String!]!
  filter: [String!]!
  location: [String!]!
  object: Resource!
  role: Role!
  time: [CreateTimeDto!]
}

input CreateProfileDto {
  email: String
  name: String!
  phone: String
}

input CreateTimeDto {
  cron_exp: String!
  duration: Int!
}

input CreateUserDto {
  _id: ID
  createdBy: String!
  groups: [String!]
  partners: [String!]
  password: String
  profile: CreateProfileDto!
  roles: [Role!]
  tags: [String!]
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""A simple Filter parser"""
scalar Filter

type Grant implements BaseEntity {
  _id: ID
  action: Action!
  createdAt: DateTime
  createdBy: String!
  deletedAt: DateTime
  deletedBy: String
  field: [String!]!
  filter: [String!]!
  groups: [String!]
  location: [String!]!
  object: Resource!
  partners: [String!]
  restoredAt: DateTime
  restoredBy: String
  role: Role!
  tags: [String!]
  time: [Time!]
  updatedAt: DateTime
  updatedBy: String
}

type Mutation {
  createGrant(createGrantDto: CreateGrantDto!): Grant!
  createUser(createUserDto: CreateUserDto!): User!
  deleteGrant(id: String!): Grant!
  deleteUser(id: String!): User!
  restoreGrant(id: String!): Grant!
  restoreUser(id: String!): User!
  updateGrant(updateGrantDto: UpdateGrantDto!): Grant!
  updateUser(updateUserDto: UpdateUserDto!): User!
}

type Profile {
  email: String
  name: String!
  phone: String
}

type Query {
  countGrant: Int!
  countUser: Int!
  findGrant(filter: Filter!): [Grant!]!
  findGrantById(id: String!): Grant!
  findUser(filter: Filter!): [User!]!
  findUserById(id: String!): User!
}

enum Resource {
  All
  Grants
  Users
}

enum Role {
  Admin
  Guest
  System
  User
}

type Time {
  cron_exp: String!
  duration: Int!
}

input UpdateGrantDto {
  _id: ID!
  action: Action!
  createdBy: String!
  field: [String!]!
  filter: [String!]!
  location: [String!]!
  object: Resource!
  role: Role!
  time: [CreateTimeDto!]
}

input UpdateUserDto {
  _id: ID!
  createdBy: String!
  groups: [String!]
  partners: [String!]
  password: String
  profile: CreateProfileDto!
  roles: [Role!]
  tags: [String!]
  username: String!
}

type User implements BaseEntity {
  _id: ID
  createdAt: DateTime
  createdBy: String!
  deletedAt: DateTime
  deletedBy: String
  groups: [String!]
  partners: [String!]
  password: String
  profile: Profile!
  restoredAt: DateTime
  restoredBy: String
  roles: [Role!]
  tags: [String!]
  updatedAt: DateTime
  updatedBy: String
  username: String!
}